<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>宇宙之一粟的小屋</title>
    <link>https://yuzhoustayhungry.github.io/</link>
    <description>Recent content on 宇宙之一粟的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 12 Jun 2020 22:13:27 +0800</lastBuildDate>
    
	<atom:link href="https://yuzhoustayhungry.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>别再告诉我Python好学！学Python到底学什么</title>
      <link>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Fri, 12 Jun 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>[toc] 程序 = 数据结构 + 算法 数据结构是程序的骨架 算法是程序的灵魂 其实各种数据结构的要点&amp;ndash;无外乎：定义 + 操作。 一、数组 / 顺序表 1. 静态分配 用一个定长数组data[]存储数据，最大空间为Maxsize</description>
    </item>
    
    <item>
      <title>为什么校招面试中“线程与进程的区别”老是被问到?我该如何回答？</title>
      <link>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 11 Jun 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程与线程？（Process vs. Thread？） 面试官（正襟危坐中）：给我说说“线程”与“进程”吧。 我（总是不太聪明的样子）：“限乘？”、“进什么城（程）？” 面试官：“操作系统中的进程与线程，你回去了解</description>
    </item>
    
    <item>
      <title>也来说说Python的垃圾回收机制？</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 23 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>垃圾回收机制 来看一下Python中的垃圾回收技术： 引用计数为主 标记清除和分代回收为辅 如果一个对象的引用计数为0，Python解释器就会回收这个对象的内存，但引用计数的缺点是不能解决循环引用的问题，所以</description>
    </item>
    
    <item>
      <title>深入理解Python内存管理与垃圾回收，再也不怕问了（一）</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Fri, 22 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>面试官：听说你学Python？那你给我讲讲Python如何进行内存管理？ 我：？？？内存管理不太清楚额。。。 面试官：那你知道Python垃圾回收吗？ 我：（尴尬一下后，还好我看到过相关博客）Python垃</description>
    </item>
    
    <item>
      <title>__str__`和`__repr__`的异同?</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E7%9A%84str%E5%92%8Crepr/</link>
      <pubDate>Thu, 21 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E7%9A%84str%E5%92%8Crepr/</guid>
      <description>__str__和__repr__的异同? 字符串的表示形式 我们都知道，Python的内置函数repr()能够把对象用字符串的形式表达出来，方便我们辨认。这就是“字符串表示形式”。repr()就是通过__</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://yuzhoustayhungry.github.io/about/</link>
      <pubDate>Sat, 11 Apr 2020 19:15:32 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/about/</guid>
      <description>热爱文学、热爱技术的宇宙间的一粟 标签：程序员 &amp;amp;&amp;amp; 理科生 兴趣：爱好广泛，上到天文历史、下到文学地理 特点：热爱专研、思考；热衷说教，想把复杂的东西说明白 生活：记录去过的地方和有意义的事 技能清单 编程语言: Python, Go,</description>
    </item>
    
    <item>
      <title>别再告诉我Python好学！学Python到底学什么</title>
      <link>https://yuzhoustayhungry.github.io/post/%E5%AD%A6python%E5%88%B0%E5%BA%95%E5%AD%A6%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 24 Mar 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E5%AD%A6python%E5%88%B0%E5%BA%95%E5%AD%A6%E4%BB%80%E4%B9%88/</guid>
      <description>前言：好像是自2018年Python火起来之后，“人生苦短，我用Python”——这句口号也慢慢成为了我跟朋友调侃自己学Python的原因。 步入了Python这个大坑后，买了很多的书，也学习了一些的P</description>
    </item>
    
    <item>
      <title>学习Python一年，这次终于弄懂了浅拷贝和深拷贝</title>
      <link>https://yuzhoustayhungry.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>官方文档：copy主题 源代码: Lib/copy.py 话说，网上已经有很多关于Python浅拷贝和深拷贝的文章了，不过好多文章看起来还是决定似懂非懂，所以决定用自己的理解来写出这样一篇文章。 当别人一提起Python中的复制</description>
    </item>
    
  </channel>
</rss>