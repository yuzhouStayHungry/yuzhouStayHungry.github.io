<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 宇宙之一粟的小屋</title>
    <link>https://yuzhoustayhungry.github.io/post/</link>
    <description>Recent content in Posts on 宇宙之一粟的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Sep 2020 01:29:18 +0800</lastBuildDate>
    
	<atom:link href="https://yuzhoustayhungry.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Django for APIs: Web APIs 的由来</title>
      <link>https://yuzhoustayhungry.github.io/post/djangoforapis-1/</link>
      <pubDate>Wed, 16 Sep 2020 01:29:18 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/djangoforapis-1/</guid>
      <description>第一章：Web APIs 在开始构建自己的网络API之前，请务必先回顾网络的实际是怎样运行的。 毕竟，“ Web API”实际上位于万维网的现有体系结构之上，并且依赖于包括HTTP，IP / TCP等在内的多种技术。 在本章中</description>
    </item>
    
    <item>
      <title>Django API开发：入门介绍</title>
      <link>https://yuzhoustayhungry.github.io/post/djangoforapis-0/</link>
      <pubDate>Wed, 16 Sep 2020 00:29:07 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/djangoforapis-0/</guid>
      <description>[toc] 介绍 互联网由RESTful API提供支持。在后台，即使最简单的在线任务也涉及到多台计算机相互交互。 API（Application Programming Interface）是描述两台计算机互相通信的一种方式。尽管有多种构</description>
    </item>
    
    <item>
      <title>剑指Offer 面试题22：链表中倒数第k个节点</title>
      <link>https://yuzhoustayhungry.github.io/post/sword-for-offer22/</link>
      <pubDate>Tue, 15 Sep 2020 13:26:03 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/sword-for-offer22/</guid>
      <description>“Successful people appear to be traveling along one continual, successful road. What is not apparent is the perseverance it takes following each defeat to keep you on that road. No one I know of has ever experienced one success after another without defeats, failures, disappointments, and frustrations galore along the way. Learning to overcome those times of agony is what separates the winners from the losers.” — G. Kingsley Ward 面试题22：链表中倒数第k</description>
    </item>
    
    <item>
      <title>剑指Offer 面试题24: 反转链表</title>
      <link>https://yuzhoustayhungry.github.io/post/sword-for-offer24/</link>
      <pubDate>Mon, 14 Sep 2020 09:11:02 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/sword-for-offer24/</guid>
      <description>面试题24：反转链表 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 示例: 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL 输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL 思路： 迭代 遍历链表，使用指针cur指向当前节点，指针prev指向cur的前驱节点。 初始</description>
    </item>
    
    <item>
      <title>剑指Offer 面试题25:合并两个有序链表</title>
      <link>https://yuzhoustayhungry.github.io/post/%E5%89%91%E6%8C%87offer-25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 13 Sep 2020 16:00:07 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E5%89%91%E6%8C%87offer-25%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>合并两个有序链表 “Think ahead. Don&amp;rsquo;t let day-to-day operations drive out planning.” — Donald Rumsfeld 题目描述 输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足递增有序的规则。 示例1： 输入：1-&amp;gt;2-</description>
    </item>
    
    <item>
      <title>剑指Offer 面试题 57：和为s的数字</title>
      <link>https://yuzhoustayhungry.github.io/post/%E5%89%91%E6%8C%87offer-57/</link>
      <pubDate>Sat, 12 Sep 2020 11:01:10 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E5%89%91%E6%8C%87offer-57/</guid>
      <description>面试题57: 和为s的数字 📖每日一句： “We hold ourselves back in ways both big and small, by lacking self-confidence, by not raising our hands, and by pulling back when we should be leaning in.” — Sheryl Sandberg 题目一：和为s的两个数字 题目描述： 输入一个递增排序的数组和一个数字s，在数组中查找两个数，使</description>
    </item>
    
    <item>
      <title>走进面向“对象”编程的理想国（一）——深入理解Python中的一切皆对象</title>
      <link>https://yuzhoustayhungry.github.io/post/%E5%AF%B9%E8%B1%A1%E7%90%86%E6%83%B3%E5%9B%BD%E7%AC%AC%E4%B8%80%E7%AF%87/</link>
      <pubDate>Tue, 11 Aug 2020 08:05:09 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E5%AF%B9%E8%B1%A1%E7%90%86%E6%83%B3%E5%9B%BD%E7%AC%AC%E4%B8%80%E7%AF%87/</guid>
      <description>如何面向“对象” 天天跟我们这些苦逼的程序猿（媛）们喊着：“要面向对象编程”，你倒是给我新建一个对象嘛。你看看，都没有对象，我怎么面向对象编程嘛。网上关于Java和C++的面向对象编程相关介绍的博客文章</description>
    </item>
    
    <item>
      <title>Python排序算法相关知识点学习</title>
      <link>https://yuzhoustayhungry.github.io/post/%E6%8E%92%E5%BA%8F%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%80%83%E7%82%B9/</link>
      <pubDate>Thu, 23 Jul 2020 19:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E6%8E%92%E5%BA%8F%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%80%83%E7%82%B9/</guid>
      <description>排序算法 一般排序算法最常考的：快速排序和归并排序。这两个算法体现了分治算法的核心观点，而且还有很多出题的可能。 更多细节请参考刘宇波老师的：不能白板编程红黑树就是基础差？别扯了。 1. 常见的排序算法 排序算法</description>
    </item>
    
    <item>
      <title>Python查找算法相关知识点学习</title>
      <link>https://yuzhoustayhungry.github.io/post/%E6%9F%A5%E6%89%BE%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%80%83%E7%82%B9/</link>
      <pubDate>Wed, 22 Jul 2020 18:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E6%9F%A5%E6%89%BE%E7%9F%A5%E8%AF%86%E5%B8%B8%E8%80%83%E7%82%B9/</guid>
      <description>查找算法 在LeetCode刷题或者面试过程中发现，查找问题一直是不可避免的。对任何数据结构的遍历过程无非就是查找过程。 我们需要针对某些数据结构的特点如何正确地、高效地进行查找，而查找的过程最需要注意边</description>
    </item>
    
    <item>
      <title>从Go语言开始，彻底学懂数据结构与算法--线性表</title>
      <link>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <pubDate>Fri, 12 Jun 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <description>[toc] 程序 = 数据结构 + 算法 数据结构是程序的骨架 算法是程序的灵魂 其实各种数据结构的要点&amp;ndash;无外乎：定义 + 操作。 一、数组 / 顺序表 1. 静态分配 用一个定长数组data[]存储数据，最大空间为Maxsize</description>
    </item>
    
    <item>
      <title>为什么校招面试中“线程与进程的区别”老是被问到?我该如何回答？</title>
      <link>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Thu, 11 Jun 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程与线程？（Process vs. Thread？） 面试官（正襟危坐中）：给我说说“线程”与“进程”吧。 我（总是不太聪明的样子）：“限乘？”、“进什么城（程）？” 面试官：“操作系统中的进程与线程，你回去了解</description>
    </item>
    
    <item>
      <title>也来说说Python的垃圾回收机制？</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Sat, 23 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>垃圾回收机制 来看一下Python中的垃圾回收技术： 引用计数为主 标记清除和分代回收为辅 如果一个对象的引用计数为0，Python解释器就会回收这个对象的内存，但引用计数的缺点是不能解决循环引用的问题，所以</description>
    </item>
    
    <item>
      <title>深入理解Python内存管理与垃圾回收，再也不怕问了（一）</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Fri, 22 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>面试官：听说你学Python？那你给我讲讲Python如何进行内存管理？ 我：？？？内存管理不太清楚额。。。 面试官：那你知道Python垃圾回收吗？ 我：（尴尬一下后，还好我看到过相关博客）Python垃</description>
    </item>
    
    <item>
      <title>__str__`和`__repr__`的异同?</title>
      <link>https://yuzhoustayhungry.github.io/post/python%E7%9A%84str%E5%92%8Crepr/</link>
      <pubDate>Thu, 21 May 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/python%E7%9A%84str%E5%92%8Crepr/</guid>
      <description>__str__和__repr__的异同? 字符串的表示形式 我们都知道，Python的内置函数repr()能够把对象用字符串的形式表达出来，方便我们辨认。这就是“字符串表示形式”。repr()就是通过__</description>
    </item>
    
    <item>
      <title>别再告诉我Python好学！学Python到底学什么</title>
      <link>https://yuzhoustayhungry.github.io/post/%E5%AD%A6python%E5%88%B0%E5%BA%95%E5%AD%A6%E4%BB%80%E4%B9%88/</link>
      <pubDate>Tue, 24 Mar 2020 22:13:27 +0800</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E5%AD%A6python%E5%88%B0%E5%BA%95%E5%AD%A6%E4%BB%80%E4%B9%88/</guid>
      <description>前言：好像是自2018年Python火起来之后，“人生苦短，我用Python”——这句口号也慢慢成为了我跟朋友调侃自己学Python的原因。 步入了Python这个大坑后，买了很多的书，也学习了一些的P</description>
    </item>
    
    <item>
      <title>学习Python一年，这次终于弄懂了浅拷贝和深拷贝</title>
      <link>https://yuzhoustayhungry.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yuzhoustayhungry.github.io/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>官方文档：copy主题 源代码: Lib/copy.py 话说，网上已经有很多关于Python浅拷贝和深拷贝的文章了，不过好多文章看起来还是决定似懂非懂，所以决定用自己的理解来写出这样一篇文章。 当别人一提起Python中的复制</description>
    </item>
    
  </channel>
</rss>